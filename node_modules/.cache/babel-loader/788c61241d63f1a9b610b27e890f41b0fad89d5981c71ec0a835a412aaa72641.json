{"ast":null,"code":"var _jsxFileName = \"/Users/ohad/Desktop/GitCollaborationDemo/supermarket/src/GlobalContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext } from 'react';\n\n// Define the props interface\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create a new context for the global state\nexport const GlobalContext = /*#__PURE__*/createContext();\nfunction GlobalContextProvider(props) {\n  _s();\n  // Define your global state and actions here\n  const [count, setCount] = React.useState(0);\n\n  // Create an object with all the values you want to share with child components\n  const globalState = {\n    count,\n    setCount\n  };\n  return (\n    /*#__PURE__*/\n    // Provide the global state to child components\n    _jsxDEV(GlobalContext.Provider, {\n      value: globalState,\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(GlobalContextProvider, \"oDgYfYHkD9Wkv4hrAPCkI/ev3YU=\");\n_c = GlobalContextProvider;\nexport function useGlobalState() {\n  _s2();\n  const globalState = useContext(GlobalContext);\n  if (!globalState) {\n    throw new Error('useGlobalState must be used within a GlobalContextProvider');\n  }\n  return globalState;\n}\n_s2(useGlobalState, \"amC1/c9ldnJBSldn3lb055gydI4=\");\nexport default GlobalContextProvider;\nvar _c;\n$RefreshReg$(_c, \"GlobalContextProvider\");","map":{"version":3,"names":["React","createContext","useContext","jsxDEV","_jsxDEV","GlobalContext","GlobalContextProvider","props","_s","count","setCount","useState","globalState","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","useGlobalState","_s2","Error","$RefreshReg$"],"sources":["/Users/ohad/Desktop/GitCollaborationDemo/supermarket/src/GlobalContext.tsx"],"sourcesContent":["import React, { createContext, useContext } from 'react';\n\n// Define the props interface\ninterface GlobalContextProviderProps {\n  children: React.ReactNode;\n}\ntype GlobalState = {\n  count: number;\n  setCount: React.Dispatch<React.SetStateAction<number>>;\n};\n// Create a new context for the global state\nexport const GlobalContext = createContext();\n\nfunction GlobalContextProvider(props: GlobalContextProviderProps) {\n  // Define your global state and actions here\n  const [count, setCount] = React.useState(0);\n\n  // Create an object with all the values you want to share with child components\n  const globalState = {\n    count,\n    setCount,\n  };\n\n  return (\n    // Provide the global state to child components\n    <GlobalContext.Provider value={globalState}>\n      {props.children}\n    </GlobalContext.Provider>\n  );\n}\n\nexport function useGlobalState() {\n  const globalState = useContext(GlobalContext);\n  if (!globalState) {\n    throw new Error('useGlobalState must be used within a GlobalContextProvider');\n  }\n  return globalState;\n}\n\nexport default GlobalContextProvider;\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,QAAQ,OAAO;;AAExD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAQA;AACA,OAAO,MAAMC,aAAa,gBAAGJ,aAAa,EAAE;AAE5C,SAASK,qBAAqBA,CAACC,KAAiC,EAAE;EAAAC,EAAA;EAChE;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,KAAK,CAACW,QAAQ,CAAC,CAAC,CAAC;;EAE3C;EACA,MAAMC,WAAW,GAAG;IAClBH,KAAK;IACLC;EACF,CAAC;EAED;IAAA;IACE;IACAN,OAAA,CAACC,aAAa,CAACQ,QAAQ;MAACC,KAAK,EAAEF,WAAY;MAAAG,QAAA,EACxCR,KAAK,CAACQ;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACQ;AAE7B;AAACX,EAAA,CAhBQF,qBAAqB;AAAAc,EAAA,GAArBd,qBAAqB;AAkB9B,OAAO,SAASe,cAAcA,CAAA,EAAG;EAAAC,GAAA;EAC/B,MAAMV,WAAW,GAAGV,UAAU,CAACG,aAAa,CAAC;EAC7C,IAAI,CAACO,WAAW,EAAE;IAChB,MAAM,IAAIW,KAAK,CAAC,4DAA4D,CAAC;EAC/E;EACA,OAAOX,WAAW;AACpB;AAACU,GAAA,CANeD,cAAc;AAQ9B,eAAef,qBAAqB;AAAC,IAAAc,EAAA;AAAAI,YAAA,CAAAJ,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}