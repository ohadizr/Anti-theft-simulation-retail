{"ast":null,"code":"var _jsxFileName = \"/Users/ohad/Desktop/GitCollaborationDemo/supermarket/src/GlobalContext.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext } from 'react';\n\n// Create a new context for the global state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GlobalContext = /*#__PURE__*/createContext();\nfunction GlobalContextProvider() {\n  _s();\n  // Define your global state and actions here\n\n  const [count, setCount] = React.useState(0);\n\n  // Create an object with all the values you want to share with child components\n  const globalState = {\n    count,\n    setCount\n  };\n  return (\n    /*#__PURE__*/\n    // Provide the global state to child components\n    _jsxDEV(GlobalContext.Provider, {\n      value: globalState,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n// export function useGlobalState() {\n//   const globalState = useContext(GlobalContext);\n//   if (!globalState) {\n//     throw new Error('useGlobalState must be used within a GlobalContextProvider');\n//   }\n//   return globalState;\n// }\n_s(GlobalContextProvider, \"oDgYfYHkD9Wkv4hrAPCkI/ev3YU=\");\n_c = GlobalContextProvider;\nexport default GlobalContextProvider;\nvar _c;\n$RefreshReg$(_c, \"GlobalContextProvider\");","map":{"version":3,"names":["React","createContext","jsxDEV","_jsxDEV","GlobalContext","GlobalContextProvider","_s","count","setCount","useState","globalState","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ohad/Desktop/GitCollaborationDemo/supermarket/src/GlobalContext.tsx"],"sourcesContent":["import React, { createContext, useContext } from 'react';\n\n// Create a new context for the global state\nexport const GlobalContext = createContext();\n\n\nfunction GlobalContextProvider() {\n  // Define your global state and actions here\n\n  const [count, setCount] = React.useState(0);\n\n  // Create an object with all the values you want to share with child components\n  const globalState = {\n    count,\n    setCount,\n  };\n\n  return (\n    // Provide the global state to child components\n    <GlobalContext.Provider value={globalState}>\n\n        {children}\n\n    </GlobalContext.Provider>\n  );\n}\n\n// export function useGlobalState() {\n//   const globalState = useContext(GlobalContext);\n//   if (!globalState) {\n//     throw new Error('useGlobalState must be used within a GlobalContextProvider');\n//   }\n//   return globalState;\n// }\n\nexport default GlobalContextProvider;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,QAAoB,OAAO;;AAExD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,aAAa,gBAAGH,aAAa,EAAE;AAG5C,SAASI,qBAAqBA,CAAA,EAAG;EAAAC,EAAA;EAC/B;;EAEA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,KAAK,CAACS,QAAQ,CAAC,CAAC,CAAC;;EAE3C;EACA,MAAMC,WAAW,GAAG;IAClBH,KAAK;IACLC;EACF,CAAC;EAED;IAAA;IACE;IACAL,OAAA,CAACC,aAAa,CAACO,QAAQ;MAACC,KAAK,EAAEF,WAAY;MAAAG,QAAA,EAEtCA;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAEY;AAE7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAX,EAAA,CA3BSD,qBAAqB;AAAAa,EAAA,GAArBb,qBAAqB;AA6B9B,eAAeA,qBAAqB;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}